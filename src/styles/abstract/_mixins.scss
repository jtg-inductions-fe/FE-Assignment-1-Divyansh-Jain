@use './variables' as *;
@use 'sass:map';

// mixin for media-query takes screen size as argument(e.g sm,md,lg)
@mixin media-query($screen) {
    @if map-has-key($map: $breakpoints, $key: $screen) {
        @media (min-width: map.get($breakpoints,$screen)) {
            @content;
        }
    }
}

// font face mixin
@mixin font-face($name, $source, $weight, $style: 'normal', $color: 'black') {
    @font-face {
        font-family: $name;
        src: url($source) format('truetype');
        font-weight: $weight;
        // font-style: $style;
        color: $color;
    }
}

// mixin for applying font-property
@mixin font-property(
    $family: 'circular-std',
    $size: 18px,
    $weight: 400,
    $color: 'black',
    $line-height: 1em
) {
    font-family: $family;
    font-size: $size;
    font-weight: $weight;
    color: $color;
    line-height: $line-height;
}

// mixin for applying flex property
@mixin flex-property(
    $direction: row,
    $justify-content: flex-start,
    $align-items: flex-start,
    $gap: 0,
    $wrap: nowrap
) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify-content;
    align-items: $align-items;
    gap: $gap;
    flex-wrap: $wrap;
}

@mixin text-property($align: left, $wrap: nowrap, $overflow: 'initial') {
    text-align: $align;
    text-wrap: $wrap;
    text-overflow: $overflow;
}

@mixin position-property(
    $position: static,
    $top: null,
    $bottom: null,
    $left: null,
    $right: null,
    $x: 0,
    $y: 0
) {
    position: $position;
    @if $top {
        top: $top;
    }
    @if $bottom {
        bottom: $bottom;
    }
    @if $left {
        left: $left;
    }
    @if $right {
        right: $right;
    }
    transform: translate($x, $y);
}

@mixin pseudo-interactive-states() {
    &:hover,
    &:focus,
    &:active,
    &:focus-visible {
        @content;
    }
}
